version: '3.8'

services:
  api:
    build: .
    ports:
      - "8000:8000"
    environment:
      - MONGO_URI=mongodb://mongodb:27017/
      - REDIS_HOST=redis
      - RABBITMQ_HOST=rabbitmq
      - MISTRAL_API_KEY=${MISTRAL_API_KEY}
    volumes:
      - ./app:/app/app
    depends_on:
      - mongodb
      - redis
      - rabbitmq
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  ml_worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: python -m app.workers.ml_worker
    environment:
      - MONGO_URI=mongodb://mongodb:27017/
      - REDIS_HOST=redis
      - RABBITMQ_HOST=rabbitmq
      - MISTRAL_API_KEY=${MISTRAL_API_KEY}
    volumes:
      - ./app:/app/app
    depends_on:
      - mongodb
      - redis
      - rabbitmq
    restart: always

  mongodb:
    image: mongo:6.0
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    restart: always
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7.0-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  rabbitmq:
    image: rabbitmq:3.11-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:v2.42.0
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: always
    depends_on:
      - api

  grafana:
    image: grafana/grafana:9.4.7
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    restart: always
    depends_on:
      - prometheus

volumes:
  mongo_data:
  redis_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data: 